package com.onmobile.apps.ringbacktones.webservice.features.getCurrSong;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-26")
public class SendData {

  public interface Iface {

    public void send(String called, String caller, String wavefile) throws org.apache.thrift.TException;

    public void sendWithCategory(String called, String caller, String wavefile, int category_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void send(String called, String caller, String wavefile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendWithCategory(String called, String caller, String wavefile, int category_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void send(String called, String caller, String wavefile) throws org.apache.thrift.TException
    {
      send_send(called, caller, wavefile);
      recv_send();
    }

    public void send_send(String called, String caller, String wavefile) throws org.apache.thrift.TException
    {
      send_args args = new send_args();
      args.setCalled(called);
      args.setCaller(caller);
      args.setWavefile(wavefile);
      sendBase("send", args);
    }

    public void recv_send() throws org.apache.thrift.TException
    {
      send_result result = new send_result();
      receiveBase(result, "send");
      return;
    }

    public void sendWithCategory(String called, String caller, String wavefile, int category_id) throws org.apache.thrift.TException
    {
      send_sendWithCategory(called, caller, wavefile, category_id);
      recv_sendWithCategory();
    }

    public void send_sendWithCategory(String called, String caller, String wavefile, int category_id) throws org.apache.thrift.TException
    {
      sendWithCategory_args args = new sendWithCategory_args();
      args.setCalled(called);
      args.setCaller(caller);
      args.setWavefile(wavefile);
      args.setCategory_id(category_id);
      sendBase("sendWithCategory", args);
    }

    public void recv_sendWithCategory() throws org.apache.thrift.TException
    {
      sendWithCategory_result result = new sendWithCategory_result();
      receiveBase(result, "sendWithCategory");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void send(String called, String caller, String wavefile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_call method_call = new send_call(called, caller, wavefile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String called;
      private String caller;
      private String wavefile;
      public send_call(String called, String caller, String wavefile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.called = called;
        this.caller = caller;
        this.wavefile = wavefile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_args args = new send_args();
        args.setCalled(called);
        args.setCaller(caller);
        args.setWavefile(wavefile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_send();
      }
    }

    public void sendWithCategory(String called, String caller, String wavefile, int category_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendWithCategory_call method_call = new sendWithCategory_call(called, caller, wavefile, category_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendWithCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String called;
      private String caller;
      private String wavefile;
      private int category_id;
      public sendWithCategory_call(String called, String caller, String wavefile, int category_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.called = called;
        this.caller = caller;
        this.wavefile = wavefile;
        this.category_id = category_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendWithCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendWithCategory_args args = new sendWithCategory_args();
        args.setCalled(called);
        args.setCaller(caller);
        args.setWavefile(wavefile);
        args.setCategory_id(category_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendWithCategory();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("send", new send());
      processMap.put("sendWithCategory", new sendWithCategory());
      return processMap;
    }

    public static class send<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_args> {
      public send() {
        super("send");
      }

      public send_args getEmptyArgsInstance() {
        return new send_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_result getResult(I iface, send_args args) throws org.apache.thrift.TException {
        send_result result = new send_result();
        iface.send(args.called, args.caller, args.wavefile);
        return result;
      }
    }

    public static class sendWithCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendWithCategory_args> {
      public sendWithCategory() {
        super("sendWithCategory");
      }

      public sendWithCategory_args getEmptyArgsInstance() {
        return new sendWithCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendWithCategory_result getResult(I iface, sendWithCategory_args args) throws org.apache.thrift.TException {
        sendWithCategory_result result = new sendWithCategory_result();
        iface.sendWithCategory(args.called, args.caller, args.wavefile, args.category_id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("send", new send());
      processMap.put("sendWithCategory", new sendWithCategory());
      return processMap;
    }

    public static class send<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, send_args, Void> {
      public send() {
        super("send");
      }

      public send_args getEmptyArgsInstance() {
        return new send_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            send_result result = new send_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            send_result result = new send_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, send_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.send(args.called, args.caller, args.wavefile,resultHandler);
      }
    }

    public static class sendWithCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendWithCategory_args, Void> {
      public sendWithCategory() {
        super("sendWithCategory");
      }

      public sendWithCategory_args getEmptyArgsInstance() {
        return new sendWithCategory_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendWithCategory_result result = new sendWithCategory_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendWithCategory_result result = new sendWithCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendWithCategory_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendWithCategory(args.called, args.caller, args.wavefile, args.category_id,resultHandler);
      }
    }

  }

  public static class send_args implements org.apache.thrift.TBase<send_args, send_args._Fields>, java.io.Serializable, Cloneable, Comparable<send_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_args");

    private static final org.apache.thrift.protocol.TField CALLED_FIELD_DESC = new org.apache.thrift.protocol.TField("called", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WAVEFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("wavefile", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_argsTupleSchemeFactory());
    }

    public String called; // required
    public String caller; // required
    public String wavefile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLED((short)1, "called"),
      CALLER((short)2, "caller"),
      WAVEFILE((short)3, "wavefile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLED
            return CALLED;
          case 2: // CALLER
            return CALLER;
          case 3: // WAVEFILE
            return WAVEFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLED, new org.apache.thrift.meta_data.FieldMetaData("called", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WAVEFILE, new org.apache.thrift.meta_data.FieldMetaData("wavefile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_args.class, metaDataMap);
    }

    public send_args() {
    }

    public send_args(
      String called,
      String caller,
      String wavefile)
    {
      this();
      this.called = called;
      this.caller = caller;
      this.wavefile = wavefile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_args(send_args other) {
      if (other.isSetCalled()) {
        this.called = other.called;
      }
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetWavefile()) {
        this.wavefile = other.wavefile;
      }
    }

    public send_args deepCopy() {
      return new send_args(this);
    }

    @Override
    public void clear() {
      this.called = null;
      this.caller = null;
      this.wavefile = null;
    }

    public String getCalled() {
      return this.called;
    }

    public send_args setCalled(String called) {
      this.called = called;
      return this;
    }

    public void unsetCalled() {
      this.called = null;
    }

    /** Returns true if field called is set (has been assigned a value) and false otherwise */
    public boolean isSetCalled() {
      return this.called != null;
    }

    public void setCalledIsSet(boolean value) {
      if (!value) {
        this.called = null;
      }
    }

    public String getCaller() {
      return this.caller;
    }

    public send_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getWavefile() {
      return this.wavefile;
    }

    public send_args setWavefile(String wavefile) {
      this.wavefile = wavefile;
      return this;
    }

    public void unsetWavefile() {
      this.wavefile = null;
    }

    /** Returns true if field wavefile is set (has been assigned a value) and false otherwise */
    public boolean isSetWavefile() {
      return this.wavefile != null;
    }

    public void setWavefileIsSet(boolean value) {
      if (!value) {
        this.wavefile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLED:
        if (value == null) {
          unsetCalled();
        } else {
          setCalled((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case WAVEFILE:
        if (value == null) {
          unsetWavefile();
        } else {
          setWavefile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLED:
        return getCalled();

      case CALLER:
        return getCaller();

      case WAVEFILE:
        return getWavefile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLED:
        return isSetCalled();
      case CALLER:
        return isSetCaller();
      case WAVEFILE:
        return isSetWavefile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_args)
        return this.equals((send_args)that);
      return false;
    }

    public boolean equals(send_args that) {
      if (that == null)
        return false;

      boolean this_present_called = true && this.isSetCalled();
      boolean that_present_called = true && that.isSetCalled();
      if (this_present_called || that_present_called) {
        if (!(this_present_called && that_present_called))
          return false;
        if (!this.called.equals(that.called))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_wavefile = true && this.isSetWavefile();
      boolean that_present_wavefile = true && that.isSetWavefile();
      if (this_present_wavefile || that_present_wavefile) {
        if (!(this_present_wavefile && that_present_wavefile))
          return false;
        if (!this.wavefile.equals(that.wavefile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_called = true && (isSetCalled());
      list.add(present_called);
      if (present_called)
        list.add(called);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_wavefile = true && (isSetWavefile());
      list.add(present_wavefile);
      if (present_wavefile)
        list.add(wavefile);

      return list.hashCode();
    }

    @Override
    public int compareTo(send_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCalled()).compareTo(other.isSetCalled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.called, other.called);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWavefile()).compareTo(other.isSetWavefile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWavefile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wavefile, other.wavefile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_args(");
      boolean first = true;

      sb.append("called:");
      if (this.called == null) {
        sb.append("null");
      } else {
        sb.append(this.called);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wavefile:");
      if (this.wavefile == null) {
        sb.append("null");
      } else {
        sb.append(this.wavefile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_argsStandardSchemeFactory implements SchemeFactory {
      public send_argsStandardScheme getScheme() {
        return new send_argsStandardScheme();
      }
    }

    private static class send_argsStandardScheme extends StandardScheme<send_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.called = iprot.readString();
                struct.setCalledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WAVEFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wavefile = iprot.readString();
                struct.setWavefileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.called != null) {
          oprot.writeFieldBegin(CALLED_FIELD_DESC);
          oprot.writeString(struct.called);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.wavefile != null) {
          oprot.writeFieldBegin(WAVEFILE_FIELD_DESC);
          oprot.writeString(struct.wavefile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_argsTupleSchemeFactory implements SchemeFactory {
      public send_argsTupleScheme getScheme() {
        return new send_argsTupleScheme();
      }
    }

    private static class send_argsTupleScheme extends TupleScheme<send_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCalled()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetWavefile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCalled()) {
          oprot.writeString(struct.called);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetWavefile()) {
          oprot.writeString(struct.wavefile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.called = iprot.readString();
          struct.setCalledIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.wavefile = iprot.readString();
          struct.setWavefileIsSet(true);
        }
      }
    }

  }

  public static class send_result implements org.apache.thrift.TBase<send_result, send_result._Fields>, java.io.Serializable, Cloneable, Comparable<send_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_result.class, metaDataMap);
    }

    public send_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_result(send_result other) {
    }

    public send_result deepCopy() {
      return new send_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_result)
        return this.equals((send_result)that);
      return false;
    }

    public boolean equals(send_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(send_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_resultStandardSchemeFactory implements SchemeFactory {
      public send_resultStandardScheme getScheme() {
        return new send_resultStandardScheme();
      }
    }

    private static class send_resultStandardScheme extends StandardScheme<send_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_resultTupleSchemeFactory implements SchemeFactory {
      public send_resultTupleScheme getScheme() {
        return new send_resultTupleScheme();
      }
    }

    private static class send_resultTupleScheme extends TupleScheme<send_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendWithCategory_args implements org.apache.thrift.TBase<sendWithCategory_args, sendWithCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendWithCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWithCategory_args");

    private static final org.apache.thrift.protocol.TField CALLED_FIELD_DESC = new org.apache.thrift.protocol.TField("called", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WAVEFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("wavefile", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("category_id", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendWithCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendWithCategory_argsTupleSchemeFactory());
    }

    public String called; // required
    public String caller; // required
    public String wavefile; // required
    public int category_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLED((short)1, "called"),
      CALLER((short)2, "caller"),
      WAVEFILE((short)3, "wavefile"),
      CATEGORY_ID((short)4, "category_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLED
            return CALLED;
          case 2: // CALLER
            return CALLER;
          case 3: // WAVEFILE
            return WAVEFILE;
          case 4: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORY_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLED, new org.apache.thrift.meta_data.FieldMetaData("called", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WAVEFILE, new org.apache.thrift.meta_data.FieldMetaData("wavefile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("category_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWithCategory_args.class, metaDataMap);
    }

    public sendWithCategory_args() {
    }

    public sendWithCategory_args(
      String called,
      String caller,
      String wavefile,
      int category_id)
    {
      this();
      this.called = called;
      this.caller = caller;
      this.wavefile = wavefile;
      this.category_id = category_id;
      setCategory_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWithCategory_args(sendWithCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCalled()) {
        this.called = other.called;
      }
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetWavefile()) {
        this.wavefile = other.wavefile;
      }
      this.category_id = other.category_id;
    }

    public sendWithCategory_args deepCopy() {
      return new sendWithCategory_args(this);
    }

    @Override
    public void clear() {
      this.called = null;
      this.caller = null;
      this.wavefile = null;
      setCategory_idIsSet(false);
      this.category_id = 0;
    }

    public String getCalled() {
      return this.called;
    }

    public sendWithCategory_args setCalled(String called) {
      this.called = called;
      return this;
    }

    public void unsetCalled() {
      this.called = null;
    }

    /** Returns true if field called is set (has been assigned a value) and false otherwise */
    public boolean isSetCalled() {
      return this.called != null;
    }

    public void setCalledIsSet(boolean value) {
      if (!value) {
        this.called = null;
      }
    }

    public String getCaller() {
      return this.caller;
    }

    public sendWithCategory_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getWavefile() {
      return this.wavefile;
    }

    public sendWithCategory_args setWavefile(String wavefile) {
      this.wavefile = wavefile;
      return this;
    }

    public void unsetWavefile() {
      this.wavefile = null;
    }

    /** Returns true if field wavefile is set (has been assigned a value) and false otherwise */
    public boolean isSetWavefile() {
      return this.wavefile != null;
    }

    public void setWavefileIsSet(boolean value) {
      if (!value) {
        this.wavefile = null;
      }
    }

    public int getCategory_id() {
      return this.category_id;
    }

    public sendWithCategory_args setCategory_id(int category_id) {
      this.category_id = category_id;
      setCategory_idIsSet(true);
      return this;
    }

    public void unsetCategory_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID);
    }

    /** Returns true if field category_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID);
    }

    public void setCategory_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLED:
        if (value == null) {
          unsetCalled();
        } else {
          setCalled((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case WAVEFILE:
        if (value == null) {
          unsetWavefile();
        } else {
          setWavefile((String)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategory_id();
        } else {
          setCategory_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLED:
        return getCalled();

      case CALLER:
        return getCaller();

      case WAVEFILE:
        return getWavefile();

      case CATEGORY_ID:
        return Integer.valueOf(getCategory_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLED:
        return isSetCalled();
      case CALLER:
        return isSetCaller();
      case WAVEFILE:
        return isSetWavefile();
      case CATEGORY_ID:
        return isSetCategory_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWithCategory_args)
        return this.equals((sendWithCategory_args)that);
      return false;
    }

    public boolean equals(sendWithCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_called = true && this.isSetCalled();
      boolean that_present_called = true && that.isSetCalled();
      if (this_present_called || that_present_called) {
        if (!(this_present_called && that_present_called))
          return false;
        if (!this.called.equals(that.called))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_wavefile = true && this.isSetWavefile();
      boolean that_present_wavefile = true && that.isSetWavefile();
      if (this_present_wavefile || that_present_wavefile) {
        if (!(this_present_wavefile && that_present_wavefile))
          return false;
        if (!this.wavefile.equals(that.wavefile))
          return false;
      }

      boolean this_present_category_id = true;
      boolean that_present_category_id = true;
      if (this_present_category_id || that_present_category_id) {
        if (!(this_present_category_id && that_present_category_id))
          return false;
        if (this.category_id != that.category_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_called = true && (isSetCalled());
      list.add(present_called);
      if (present_called)
        list.add(called);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_wavefile = true && (isSetWavefile());
      list.add(present_wavefile);
      if (present_wavefile)
        list.add(wavefile);

      boolean present_category_id = true;
      list.add(present_category_id);
      if (present_category_id)
        list.add(category_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendWithCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCalled()).compareTo(other.isSetCalled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.called, other.called);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWavefile()).compareTo(other.isSetWavefile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWavefile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wavefile, other.wavefile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory_id()).compareTo(other.isSetCategory_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category_id, other.category_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendWithCategory_args(");
      boolean first = true;

      sb.append("called:");
      if (this.called == null) {
        sb.append("null");
      } else {
        sb.append(this.called);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wavefile:");
      if (this.wavefile == null) {
        sb.append("null");
      } else {
        sb.append(this.wavefile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category_id:");
      sb.append(this.category_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWithCategory_argsStandardSchemeFactory implements SchemeFactory {
      public sendWithCategory_argsStandardScheme getScheme() {
        return new sendWithCategory_argsStandardScheme();
      }
    }

    private static class sendWithCategory_argsStandardScheme extends StandardScheme<sendWithCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWithCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.called = iprot.readString();
                struct.setCalledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WAVEFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wavefile = iprot.readString();
                struct.setWavefileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.category_id = iprot.readI32();
                struct.setCategory_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWithCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.called != null) {
          oprot.writeFieldBegin(CALLED_FIELD_DESC);
          oprot.writeString(struct.called);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.wavefile != null) {
          oprot.writeFieldBegin(WAVEFILE_FIELD_DESC);
          oprot.writeString(struct.wavefile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.category_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWithCategory_argsTupleSchemeFactory implements SchemeFactory {
      public sendWithCategory_argsTupleScheme getScheme() {
        return new sendWithCategory_argsTupleScheme();
      }
    }

    private static class sendWithCategory_argsTupleScheme extends TupleScheme<sendWithCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWithCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCalled()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetWavefile()) {
          optionals.set(2);
        }
        if (struct.isSetCategory_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCalled()) {
          oprot.writeString(struct.called);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetWavefile()) {
          oprot.writeString(struct.wavefile);
        }
        if (struct.isSetCategory_id()) {
          oprot.writeI32(struct.category_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWithCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.called = iprot.readString();
          struct.setCalledIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.wavefile = iprot.readString();
          struct.setWavefileIsSet(true);
        }
        if (incoming.get(3)) {
          struct.category_id = iprot.readI32();
          struct.setCategory_idIsSet(true);
        }
      }
    }

  }

  public static class sendWithCategory_result implements org.apache.thrift.TBase<sendWithCategory_result, sendWithCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendWithCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendWithCategory_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendWithCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendWithCategory_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendWithCategory_result.class, metaDataMap);
    }

    public sendWithCategory_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendWithCategory_result(sendWithCategory_result other) {
    }

    public sendWithCategory_result deepCopy() {
      return new sendWithCategory_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendWithCategory_result)
        return this.equals((sendWithCategory_result)that);
      return false;
    }

    public boolean equals(sendWithCategory_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sendWithCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendWithCategory_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendWithCategory_resultStandardSchemeFactory implements SchemeFactory {
      public sendWithCategory_resultStandardScheme getScheme() {
        return new sendWithCategory_resultStandardScheme();
      }
    }

    private static class sendWithCategory_resultStandardScheme extends StandardScheme<sendWithCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendWithCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendWithCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendWithCategory_resultTupleSchemeFactory implements SchemeFactory {
      public sendWithCategory_resultTupleScheme getScheme() {
        return new sendWithCategory_resultTupleScheme();
      }
    }

    private static class sendWithCategory_resultTupleScheme extends TupleScheme<sendWithCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendWithCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendWithCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
