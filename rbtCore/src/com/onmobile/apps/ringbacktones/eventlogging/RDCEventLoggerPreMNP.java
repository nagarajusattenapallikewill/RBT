


/**
 * This is generated code and SHOULD NOT BE MODIFIED BY HAND. To change the transactions or the fields below, please regenerate.
 * If you have any questions, contact the Morpheus team.
 */
package com.onmobile.apps.ringbacktones.eventlogging;

import com.onmobile.reporting.framework.capture.api.Configuration;
import com.onmobile.reporting.framework.capture.api.ReportingException;

/**Interoperator copy transaction report. 
 */
public class RDCEventLoggerPreMNP extends com.onmobile.reporting.framework.capture.api.TransactionBase {

	/**
	 * @param config Configuration of this logging system. Most important configuration item is the filepath to which logging should be done.
	 * @throws IOException if the initial log file cannot be created
	 */
	public RDCEventLoggerPreMNP(Configuration config) throws java.io.IOException {
		super();
		initialize(config);
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getProduct()
	 */
	public String getProduct() {
		return "RdcCopyTrans";
	}
	
	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getVersion()
	 */
	public String getVersion() {
		return "1.0.1";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getFieldHeadings()
	 */
	protected String getFieldHeadings() {
		return "TIMESTAMP,TRANSTYPE,SOURCE_MSISDN,SOURCE_OPERATOR,SOURCE_CONTENT_ID,SOURCE_CONTENT_TYPE,SOURCE_CATEGORY_ID,DESTINATION_MSISDN,DESTINATION_OPERATOR,DESTINATION_CONTENT_ID,DESTINATION_CONTENT_TYPE,DESTINATION_CATEGORY_ID,KEY_PRESSED,RESULT";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#isAutoGeneratedTimestamp()
	 */
	protected boolean isAutoGeneratedTimestamp() {
		return false;
	}

	/**
	 * Transaction that indicates interoperator RBT copy. 
	 *
	 * @param sourceMsisdn Msisdn of subscriber who was called 
	 * @param sourceOperator Operator name of called subscriber 
	 * @param sourceContentId Content Id in called operator 
	 * @param sourceContentType Content Type in called operator 
	 * @param sourceCategoryId Category Id in called operator 
	 * @param destinationMsisdn Msisdn of calling subscriber 
	 * @param destinationOperator Operator name of caller 
	 * @param destinationContentId Content Id in caller operator 
	 * @param destinationContentType Content Type in caller operator 
	 * @param destinationCategoryId Category Id in caller operator 
	 * @param timestamp Record time stamp of beginning of this transaction 
	 * @param keyPressed DTMF input 
	 * @param result End result of this transaction 
	*/
	public void copyTransaction(
		 String sourceMsisdn
		,String sourceOperator
		,String sourceContentId
		,String sourceContentType
		,String sourceCategoryId
		,String destinationMsisdn
		,String destinationOperator
		,String destinationContentId
		,String destinationContentType
		,String destinationCategoryId
		,java.util.Date timestamp
		,String keyPressed
		,String result
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "copyTransaction", false); // transType
		nextField(buff);// write field separator
		append(buff, sourceMsisdn, true);
		nextField(buff);// write field separator
		append(buff, sourceOperator, true);
		nextField(buff);// write field separator
		append(buff, sourceContentId, true);
		nextField(buff);// write field separator
		append(buff, sourceContentType, true);
		nextField(buff);// write field separator
		append(buff, sourceCategoryId, true);
		nextField(buff);// write field separator
		append(buff, destinationMsisdn, true);
		nextField(buff);// write field separator
		append(buff, destinationOperator, true);
		nextField(buff);// write field separator
		append(buff, destinationContentId, true);
		nextField(buff);// write field separator
		append(buff, destinationContentType, true);
		nextField(buff);// write field separator
		append(buff, destinationCategoryId, true);
		nextField(buff);// write field separator
		append(buff, keyPressed, true);
		nextField(buff);// write field separator
		append(buff, result, true);
		write(buff); // write record to file
	} // end of transaction function

}
