


/**
 * This is generated code and SHOULD NOT BE MODIFIED BY HAND. To change the transactions or the fields below, please regenerate.
 * If you have any questions, contact the Morpheus team.
 */
package com.onmobile.apps.ringbacktones.eventlogging;

import com.onmobile.reporting.framework.capture.api.Configuration;
import com.onmobile.reporting.framework.capture.api.ReportingException;

/**Every movie that has been selected by the user, or everytime a user completes as already selected movie, it will be logged here. 
 */
public class EventLogger extends com.onmobile.reporting.framework.capture.api.TransactionBase {

	/**
	 * @param config Configuration of this logging system. Most important configuration item is the filepath to which logging should be done.
	 * @throws IOException if the initial log file cannot be created
	 */
	public EventLogger(Configuration config) throws java.io.IOException {
		super();
		initialize(config);
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getProduct()
	 */
	public String getProduct() {
		return "rbtCopyTrans";
	}
	
	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getVersion()
	 */
	public String getVersion() {
		return "1.0.2";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getFieldHeadings()
	 */
	protected String getFieldHeadings() {
		return "TIMESTAMP,TRANSTYPE,CALLED__MSISDN,CALLER__MSISDN,CALLER__SUBSCRIBED__AT__COPY,CALLER__TYPE,CATEGORY__NAME,COPY__DONE,COPY__TIME,COPY__TYPE,KEY__PRESSED,SMS__TYPE,SONG,CONFIRMATION__MODE,CALLED_OPERATOR";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#isAutoGeneratedTimestamp()
	 */
	protected boolean isAutoGeneratedTimestamp() {
		return false;
	}

	/**
	 * Transaction for a copy request 
	 *
	 * @param called_msisdn Called Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param caller_msisdn Caller Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param caller_subscribed_at_copy Subscription happened at time of selection (yes/no) 
	 * @param caller_type Circle/Operator of caller 
	 * @param category_name Song Category 
	 * @param copy_done copy_done (yes/no) 
	 * @param copy_time Copy request time 
	 * @param copy_type Opt in/direct copy 
	 * @param key_pressed DTMF input 
	 * @param sms_type Status of request as in duplicate, failed, succeded, expired content etc 
	 * @param song Wave file name 
	 * @param confirmation_mode Channel of opt in confirmation 
	 * @param calledOperator The name of the operator to which called number belongs 
	 * @param timestamp Record created time stamp 
	*/
	public void copyTrans(
		 String called_msisdn
		,String caller_msisdn
		,String caller_subscribed_at_copy
		,String caller_type
		,String category_name
		,String copy_done
		,java.util.Date copy_time
		,String copy_type
		,String key_pressed
		,String sms_type
		,String song
		,String confirmation_mode
		,String calledOperator
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "copyTrans", false); // transType
		nextField(buff);// write field separator
		append(buff, called_msisdn, false);
		nextField(buff);// write field separator
		append(buff, caller_msisdn, false);
		nextField(buff);// write field separator
		append(buff, caller_subscribed_at_copy, true);
		nextField(buff);// write field separator
		append(buff, caller_type, true);
		nextField(buff);// write field separator
		append(buff, category_name, true);
		nextField(buff);// write field separator
		append(buff, copy_done, true);
		nextField(buff);// write field separator
		append(buff, copy_time);
		nextField(buff);// write field separator
		append(buff, copy_type, true);
		nextField(buff);// write field separator
		append(buff, key_pressed, true);
		nextField(buff);// write field separator
		append(buff, sms_type, true);
		nextField(buff);// write field separator
		append(buff, song, true);
		nextField(buff);// write field separator
		append(buff, confirmation_mode, true);
		nextField(buff);// write field separator
		append(buff, calledOperator, true);
		write(buff); // write record to file
	} // end of transaction function

}

