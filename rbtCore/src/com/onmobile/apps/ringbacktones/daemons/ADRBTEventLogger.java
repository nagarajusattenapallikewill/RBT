


/**
 * This is generated code and SHOULD NOT BE MODIFIED BY HAND. To change the transactions or the fields below, please regenerate.
 * If you have any questions, contact the Morpheus team.
 */
package com.onmobile.apps.ringbacktones.daemons;

import com.onmobile.reporting.framework.capture.api.Configuration;
import com.onmobile.reporting.framework.capture.api.ReportingException;

/**Every movie that has been selected by the user, or everytime a user completes as already selected movie, it will be logged here. 
 */
public class ADRBTEventLogger extends com.onmobile.reporting.framework.capture.api.TransactionBase {

	/**
	 * @param config Configuration of this logging system. Most important configuration item is the filepath to which logging should be done.
	 * @throws IOException if the initial log file cannot be created
	 */
	public ADRBTEventLogger(Configuration config) throws java.io.IOException {
		super();
		initialize(config);
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getProduct()
	 */
	public String getProduct() {
		return "adrbt";
	}
	
	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getVersion()
	 */
	public String getVersion() {
		return "1.0.1";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#getFieldHeadings()
	 */
	protected String getFieldHeadings() {
		return "TIMESTAMP,TRANSTYPE,MSISDN";
	}

	/* (non-Javadoc)
	 * @see com.onmobile.reporting.framework.capture.api.TransactionBase#isAutoGeneratedTimestamp()
	 */
	protected boolean isAutoGeneratedTimestamp() {
		return false;
	}

	/**
	 * Ad-Rbt activation by a new subscriber 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void NewSubAdRbtAct(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "NewSubAdRbtAct", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

	/**
	 * Ad-Rbt activation by a Rbt subscriber 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void RbtSubAdRbtAct(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "RbtSubAdRbtAct", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

	/**
	 * Rbt activation by a Ad-Rbt subscriber 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void AdRbtSubRbtAct(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "AdRbtSubRbtAct", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

	/**
	 * Ad-Rbt de-activation by a Ad-Rbt subscriber 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void AdRbtDct(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "AdRbtDct", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

	/**
	 * Ad-Rbt de-activation by a subscriber having both Ad-Rbt and Rbt Subscriptions 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void AdRbtDctRbtSub(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "AdRbtDctRbtSub", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

	/**
	 * Rbt de-activation by a subscriber having both Ad-Rbt and Rbt Subscriptions 
	 *
	 * @param msisdn Mobile Number, caller should guarantee that no commas, carriage-returns or line-feeds are passed in 
	 * @param timestamp Record created time stamp 
	*/
	public void RbtDctAdRbtSub(
		 String msisdn
		,java.util.Date timestamp
	) throws ReportingException {
		StringBuffer buff = new StringBuffer();
		append(buff, timestamp);
		nextField(buff);// write field separator
		append(buff, "RbtDctAdRbtSub", false); // transType
		nextField(buff);// write field separator
		append(buff, msisdn, false);
		write(buff); // write record to file
	} // end of transaction function

}
